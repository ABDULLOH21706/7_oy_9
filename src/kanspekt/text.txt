TypeScriptda 'namespace' yani nomlar fazosi TypeScriptda tilida kodni qismga ega bolish va qisqa yolni taqdim etish uchun ishlatiladi bu kodni qayta ishlash va kodni organishni
osonlashtirish maqsadida foydalaniladi kodimizda bir qancha chunishni osonlashtiradi

namespaceda biz hohlagan typelarini uning scopeda ishlata olamiz va namespace bizga o'zgaruvchi nomlari qatnashib ketishini oldini olish uchun ham ishlatiladi
Masalan: {
```
    namespace Mathematics {
        export function add(x: number, y: number): number {
            return x + y;
        }

        export function subtract(x: number, y: number): number {
            return x - y;
        }
    }

    // Funksiyalarni chaqirish
    console.log(Mathematics.add(5, 3)) // 8
    console.log(Mathematics.subtract(5, 3)) // 2

    namespace Mynamespace {
        export const pi: number = 3.14;
        export const message: string = "Hello from Mynamespace";
        export interface Person {
            name: string
            age: number
        }
    }

    // Funksiyalar bo'lmagan namespace ichidagi turli elementlarga murojaat qilish
    console.log(Mynamespace.pi); // 3.14
    console.log(Mynamespace.message); // Hello from Mynamespace

    const person: Mynamespace.Person = {
        name: "Jhon",
        age: 30
    }
    console.log(person); // { name: 'Jhon', age: 30 }
```
}




Generic typlar bizga TypeScriptda typlarni dinamyc tarzda berishga imkon beradi.
Agar biz Generic typdan so'ng ma'lum bir type beradigan bo'lsak Generic typimiz osha typga o'zgaradi.

Type Alieses yordamida pastda misol yozilgan: {
    ```
        type A<T> = T:
        type B = A<string>;  // B = string
        type C = A<number>;  // C = number
        type D = A<boolean>; // D = boolean

        // Biron bir qiymatga ham ega bo'lishi mumkin

        type E = A<"TS">; // E = "TS"
    ```
}

Generic arraylarda qo'llash: {
    ```
        let arr: Array<string | number> = ["salom", 12 , "23", 34]

        // type yordamida yasash
        type MyArray<T> = [];
        const arr2: MyArray<boolean> = [false, false, true, true];
    ```
}